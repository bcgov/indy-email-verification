// Assumes Builds, Images, and Deployments have the same name(s)
// If necessary place in the order they need to be deployed.
def COMPONENTS = ['indy-catalyst-agent', 'email-verification-service']

// Edit your environment TAG names below
def TAG_NAMES = ['dev', 'test', 'prod']

// The base namespace of you environments.
def NAME_SPACE = 'devex-von-image'

// Get an image's hash tag
String getImageTagHash(String imageName, String tag = "") {

  if(!tag?.trim()) {
    tag = "latest"
  }

  def istag = openshift.raw("get istag ${imageName}:${tag} -o template --template='{{.image.dockerImageReference}}'")
  return istag.out.tokenize('@')[1].trim()
}

node {
  for(item in COMPONENTS)
  {
    stage("Building ${item}") {
      script {
        openshift.withCluster() {
          openshift.withProject() {

            echo "Building the ${item} image ..."
            def build = openshift.selector("bc", "${item}")
            build.startBuild().logs("-f")
          }
        }
      }
    }
  }

  for(item in COMPONENTS)
  {
    stage("Deploying ${item}") {
      script {
        openshift.withCluster() {
          openshift.withProject() {

            echo "Tagging ${item} for deployment to ${TAG_NAMES[0]} ..."

            // Don't tag with BUILD_ID so the pruner can do it's job; it won't delete tagged images.
            // Tag the images for deployment based on the image's hash
            def IMAGE_HASH = getImageTagHash("${item}")
            echo "IMAGE_HASH: ${IMAGE_HASH}"
            openshift.tag("${item}@${IMAGE_HASH}", "${item}:${TAG_NAMES[0]}")
          }

          openshift.withProject("${NAME_SPACE}-${TAG_NAMES[0]}") {
              def dc = openshift.selector('dc', "${item}")
              // Wait for the deployment to complete.
              // This will wait until the desired replicas are all available
              dc.rollout().status()
          }

          echo "Deployment Complete."
        }
      }
    }
  }
}